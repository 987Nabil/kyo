package kyo

import org.slf4j.LoggerFactory

object Logs:
    val unsafe: Unsafe = Unsafe(LoggerFactory.getLogger("kyo.logs"))
    private val local  = Locals.init(unsafe)

    def let[T, S](u: Unsafe)(f: => T < (IOs & S)): T < (IOs & S) =
        local.let(u)(f)

    trait Unsafe:
        def traceEnabled: Boolean
        def debugEnabled: Boolean
        def infoEnabled: Boolean
        def warnEnabled: Boolean
        def errorEnabled: Boolean

        def trace(msg: => String)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def trace(msg: => String, t: => Throwable)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def debug(msg: => String)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def debug(msg: => String, t: => Throwable)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def info(msg: => String)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def info(msg: => String, t: => Throwable)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def warn(msg: => String)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def warn(msg: => String, t: => Throwable)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def error(msg: => String)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit

        def error(msg: => String, t: => Throwable)(
            using
            file: sourcecode.FileName,
            line: sourcecode.Line
        ): Unit
    end Unsafe

    object Unsafe:
        def apply(logger: org.slf4j.Logger): Unsafe = new Unsafe:
            inline def traceEnabled: Boolean = logger.isTraceEnabled
            inline def debugEnabled: Boolean = logger.isDebugEnabled
            inline def infoEnabled: Boolean  = logger.isInfoEnabled
            inline def warnEnabled: Boolean  = logger.isWarnEnabled
            inline def errorEnabled: Boolean = logger.isErrorEnabled

            inline def trace(msg: => String)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                // Discard wrappers so their allocation
                // can be elided by the JIT. The values
                // are `String`s from the constant pool
                // since they're generated by a macro.
                // This could be avoided if sourcecode's
                // values were `AnyVal`s.
                val f = file.value
                val l = line.value
                if traceEnabled then logger.trace(s"[$f:$l] $msg")
            end trace

            inline def trace(msg: => String, t: => Throwable)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if traceEnabled then logger.trace(s"[$f:$l] $msg", t)
            end trace

            inline def debug(msg: => String)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if debugEnabled then logger.debug(s"[$f:$l] $msg")
            end debug

            inline def debug(msg: => String, t: => Throwable)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if debugEnabled then logger.debug(s"[$f:$l] $msg", t)
            end debug

            inline def info(msg: => String)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if infoEnabled then logger.info(s"[$f:$l] $msg")
            end info

            inline def info(msg: => String, t: => Throwable)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if infoEnabled then logger.info(s"[$f:$l] $msg", t)
            end info

            inline def warn(msg: => String)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if warnEnabled then logger.warn(s"[$f:$l] $msg")
            end warn

            inline def warn(msg: => String, t: => Throwable)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if warnEnabled then logger.warn(s"[$f:$l] $msg", t)
            end warn

            inline def error(msg: => String)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if errorEnabled then logger.error(s"[$f:$l] $msg")
            end error

            inline def error(msg: => String, t: => Throwable)(
                using
                file: sourcecode.FileName,
                line: sourcecode.Line
            ): Unit =
                val f = file.value
                val l = line.value
                if errorEnabled then logger.error(s"[$f:$l] $msg", t)
            end error
    end Unsafe

    private inline def logWhen(inline enabled: Unsafe => Boolean)(inline log: Unsafe => Unit): Unit < IOs =
        local.use { unsafe =>
            if enabled(unsafe) then
                IOs(log(unsafe))
            else
                IOs.unit
        }

    inline def trace(inline msg: => String)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        // The suspended function will have two
        // pointers for `file` and `line`. It could be a
        // single pointer if sourcecode had an
        // implicit for `fileName:line`.
        logWhen(_.traceEnabled)(_.trace(msg))
    end trace

    inline def trace(inline msg: => String, inline t: => Throwable)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.traceEnabled)(_.trace(msg, t))

    inline def debug(inline msg: => String)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.debugEnabled)(_.debug(msg))

    inline def debug(inline msg: => String, inline t: => Throwable)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.debugEnabled)(_.debug(msg, t))

    inline def info(inline msg: => String)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.infoEnabled)(_.info(msg))

    inline def info(inline msg: => String, inline t: => Throwable)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.infoEnabled)(_.info(msg, t))

    inline def warn(inline msg: => String)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.warnEnabled)(_.warn(msg))

    inline def warn(inline msg: => String, inline t: => Throwable)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.warnEnabled)(_.warn(msg, t))

    inline def error(inline msg: => String)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.errorEnabled)(_.error(msg))

    inline def error(inline msg: => String, inline t: => Throwable)(
        using
        file: sourcecode.FileName,
        line: sourcecode.Line
    ): Unit < IOs =
        logWhen(_.errorEnabled)(_.error(msg, t))

end Logs
