name: bench
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      selector:
        description: 'Benchmarks selector'     
        required: false
        default: '' 

permissions:
  contents: write
  deployments: write

jobs:
  bench:
    name: bench
    runs-on: bench
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.17.0

      - name: install async-profiler
        run: |
          cd /home/runner
          wget https://github.com/jvm-profiling-tools/async-profiler/releases/download/v2.9/async-profiler-2.9-linux-x64.tar.gz
          tar -xvzf async-profiler-2.9-linux-x64.tar.gz
          sudo mkdir -p /usr/java/packages/lib/
          sudo cp async-profiler-2.9-linux-x64/build/libasyncProfiler.so /usr/java/packages/lib/
          sudo sysctl kernel.perf_event_paranoid=1
          sudo sysctl kernel.kptr_restrict=0

      - name: run
        run: |
          cd /home/runner/work/kyo/kyo/
          if [[ "${{ github.event_name }}" == "push" ]]; then
            SELECTOR="Kyo"
          else
            SELECTOR="${{ github.event.inputs.selector }}"
          fi
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true -prof \"async:alloc;output=flamegraph\" $SELECTOR"
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true -prof async:output=flamegraph $SELECTOR"
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true $SELECTOR"

      - name: prepare results
        run: |
          mkdir -p output/
          cp -r kyo-bench/.jvm/*.json output/
          cp -r kyo-bench/.jvm/kyo.bench.* output/
          rm -rf output/**/*reverse.html
          ls output/

      - name: publish results
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GIST_PAT }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');

            async function getFiles(dir) {
              const dirents = await fs.readdir(dir, { withFileTypes: true });
              const files = await Promise.all(dirents.map((dirent) => {
                const res = path.resolve(dir, dirent.name);
                return dirent.isDirectory() ? getFiles(res) : res;
              }));
              return Array.prototype.concat(...files);
            }

            let gistFiles = {};

            const files = await getFiles('output/');
            for (const file of files) {
              const content = await fs.readFile(file, 'utf-8');
              const relativePath = path.relative('output/', file);
              let gistFileName = relativePath.split(path.sep).join('-');
              // Simplify the filename
              if (gistFileName === 'jmh-result.json') {
                const fullSha = context.sha;
                const shortSha = fullSha.slice(0, 7);
                gistFileName = `${shortSha}-jmh-result.json`;
              } else {
                gistFileName = gistFileName.replace(/kyo.bench.(\w+).(\w+)-\w+-flame-(\w+)-forward.html/, '$1-$2-$3.html');
              }
              gistFiles[gistFileName] = { content: content };
            }

            await github.rest.gists.create({
              files: gistFiles,
              public: true
            });





