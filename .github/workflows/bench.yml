name: bench
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      selector:
        description: 'Benchmarks selector'     
        required: false
        default: '' 

permissions:
  contents: write
  deployments: write
  gist: write

jobs:
  bench:
    name: bench
    runs-on: bench
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.17.0

      - name: install async-profiler
        run: |
          cd /home/runner
          wget https://github.com/jvm-profiling-tools/async-profiler/releases/download/v2.9/async-profiler-2.9-linux-x64.tar.gz
          tar -xvzf async-profiler-2.9-linux-x64.tar.gz
          sudo mkdir -p /usr/java/packages/lib/
          sudo cp async-profiler-2.9-linux-x64/build/libasyncProfiler.so /usr/java/packages/lib/
          sudo sysctl kernel.perf_event_paranoid=1
          sudo sysctl kernel.kptr_restrict=0

      - name: run
        run: |
          cd /home/runner/work/kyo/kyo/
          if [[ "${{ github.event_name }}" == "push" ]]; then
            SELECTOR="Kyo"
          else
            SELECTOR="${{ github.event.inputs.selector }}"
          fi
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true -prof \"async:alloc;output=flamegraph\" $SELECTOR"
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true -prof async:output=flamegraph $SELECTOR"
          sbt "kyo-bench/jmh:clean;kyo-bench/jmh:run -wi 5 -i 3 -r 1 -w 1 -t 1 -rf json -foe true $SELECTOR"

      - name: prepare results
        run: |
          mkdir -p output/
          cp -r kyo-bench/.jvm/*.json output/
          cp -r kyo-bench/.jvm/kyo.bench.* output/
          rm -rf output/**/*reverse.html

      - name: publish results
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            const files = await fs.readdir('output/');
            let gistFiles = {};

            for (const file of files) {
              const content = await fs.readFile(path.join('output/', file), 'utf-8');
              gistFiles[file] = { content: content };
            }

            github.rest.gists.create({
              files: gistFiles,
              public: true
            });
